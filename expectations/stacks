compiles:
-> {
  for var i=0; i < n; i++
    fn.call @, i
}

to:
function() {
  var i; for(i=0; i < n; i++)
    fn.call(this, i)
}

compiles:

for y in x
  if x, return

to:

var y; for(y in x)
  if(x) return

compiles:

state is :active

to:

state === 'active'


compiles:

-> x is y

to:

function() { return x === y }

compiles:

map -> { a * 11 }

to:

map(function() { return a * 11 })

compiles:

exports.testAddEdge = (is, done) -> {
  client.select 15
  client.FLUSHDB()

  u = User.create! {id: "jonah"}
  p = Puzzle.create! {id: 2}

  err, data = User.client.get! "User:jonah:love:n"
  is.equal data, null

  ok = u.link! p.id, "love"
  is.ok ok

  //logKeys()
  err, data = User.client.sismember! "User:jonah:love","2"
  is.equal data, 1

  err, data = User.client.get! "User:jonah:love:n"
  is.equal data, "1"

  done()
}
to:
exports.testAddEdge = function(is, done) {
  client.select(15)
  client.FLUSHDB()

  User.create({id: "jonah"}, function(_0) { var u; u = _0
  Puzzle.create({id: 2}, function(_1) { var p; p = _1

  User.client.get("User:jonah:love:n", function(_2, _3) { var err, data; err = _2, data = _3
  is.equal(data, null)

  u.link(p.id, "love", function(_4) { var ok; ok = _4
  is.ok(ok)

  //logKeys()
  User.client.sismember("User:jonah:love","2", function(_5, _6) { err = _5, data = _6
  is.equal(data, 1)

  User.client.get("User:jonah:love:n", function(_7, _8) { err = _7, data = _8
  is.equal(data, "1")

  return done() }) }) }) }) }) })
}





compiles:
x = -> {
  x ||= y
}

to:

var x; x = function() {
  return x = x || y
}

compiles:
for x of row.split ""
  log letter
to:
var _xpr, _a, x, _b; for(_a = 0, _b = (_xpr=row.split("")).length; _a < _b; _a++) { x = _xpr[_a];
  log(letter) }


compiles:
if side == 1, letter .= toLowerCase()

to:
if(side == 1) letter = letter.toLowerCase()


compiles:
function() {
  if User.find! @id, @error "already exists"
  done()
}

to:
function() {
  var _this = this; User.find(this.id, function(_0) { if(_0) _this.error("already exists")
  done() })
}

compiles:

do {
  // stuff
} while true


to:

do {
  // stuff
} while(true)

compiles:

x = -> {
   x = y(/\\/g, '\\\\');
   x = y(/"/g, '\\"');
   return '"'+argument+'"';
 };


to:

var x; x = function() {
   x = y(/\\/g, '\\\\');
   x = y(/"/g, '\\"');
   return '"'+argument+'"';
 };



compiles:

Unit::initialize = -> {
  super o
}
to:

Unit.prototype.initialize = function() {
  return Unit.__super__.initialize.call(this, o)
}


compiles:

class B extends A {
  x = 1
}


to:

function B()  {
  var x; x = 1
}; __extends(B, A);


function __extends(child, parent) {
  var __hasProp = Object.prototype.hasOwnProperty;
  for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}

compiles:
{
 xx
}

to:
{
 xx
}


